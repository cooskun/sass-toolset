@mixin triangle($dir, $size, $color, $ie6: false) {
  //  Base properties for the triangle
  width: 0;
  height: 0;
  border-style: solid;

  //  Sizes list
  $length: length($size);

  //  Default unit for unitless values
  $default-unit: 'px';

  //  All size values will be here with default unit
  $sizes-unit: ();

  //  All size values will be here as unitless
  $sizes-unitless: ();

  //  Check the sizes that it might be unitless
  //  Make two list from sizes : $size-unit, $size-unitless
  //  All value will attach to both list with unit and without unit
  @each $i in $size {
    //  Value is unitless
    @if unitless($i) {
      $sizes-unit: append($sizes-unit, $i * 1#{$default-unit});
      $sizes-unitless: append($sizes-unitless, $i);
    }

    //  Value has unit
    @else {
      $sizes-unit: append($sizes-unit, $i);
      $sizes-unitless: append($sizes-unit, unitless($i));
    }
  }

  //  If $dir comes without quotes fix it
  @if unquote($dir) {
    $dir: #{$dir};
  }

  //  There is one value for the size
  @if $length == 1 {
    $width: $sizes-unit !global;
    $height: $sizes-unit !global;

    $half-width: nth($sizes-unitless, 1) / 2#{$default-unit} !global;
    $half-height: nth($sizes-unitless, 1) / 2#{$default-unit} !global;
  }

  //  There is two values for the size
  @if $length == 2 {
    $width: nth($sizes-unit, 1) !global;
    $height: nth($sizes-unit, 2) !global;

    $half-width: nth($sizes-unitless, 1) / 2#{$default-unit} !global;
    $half-height: nth($sizes-unitless, 2) / 2#{$default-unit} !global;
  }

  //  There is three values for the size
  @if $length == 3 {
    //  Triangle direction is vertical
    @if $dir == 'custom up' or $dir == 'custom down' {
      $height: nth($sizes-unit, 1) !global;
      $left: nth($sizes-unit, 2) !global;
      $right: nth($sizes-unit, 3) !global;
    }

    //  Triangle direction is horizontal
    @else if $dir == 'custom left' or $dir == 'custom right' {
      $width: nth($sizes-unit, 1) !global;
      $up: nth($sizes-unit, 2) !global;
      $down: nth($sizes-unit, 3) !global;
    }
  }

  //  Create triangle

  //  Triangle is looking up
  @if $dir == 'up' {
    border-width: 0 $half-width $height $half-width;
    border-color: transparent transparent $color transparent;

    @if $ie6 {
      _border-color: #000000 #000000 $color #000000;
    }
  }

  //  Triangle is looking down
  @else if $dir == 'down' {
    border-width: $height $half-width 0 $half-width;
    border-color: $color transparent transparent transparent;

    @if $ie6 {
      _border-color: $color #000000 #000000 #000000;
    }
  }

  //  Triangle is looking left
  @else if $dir == 'left' {
    border-width: $half-height $half-width $half-height 0;
    border-color: transparent $color transparent transparent;

    @if $ie6 {
      _border-color: #000000 $color #000000 #000000;
    }
  }

  //  Triangle is looking right
  @else if $dir == 'right' {
    border-width: $half-height 0 $half-height $width;
    border-color: transparent transparent transparent $color;

    @if $ie6 {
      _border-color: #000000 #000000 #000000 $color;
    }
  }

  //  Triangle is looking up-left
  @else if $dir == 'up left' or $dir == 'left up' {
    border-width: $height $width 0 0;
    border-color: $color transparent transparent transparent;

    @if $ie6 {
      _border-color: $color #000000 #000000 #000000;
    }
  }

  //  Triangle is looking up-right
  @else if $dir == 'up right' or $dir == 'right up' {
    border-width: 0 $width $height 0;
    border-color: transparent $color transparent transparent;

    @if $ie6 {
      _border-color: #000000 $color #000000 #000000;
    }
  }

  //  Triangle is looking down-left
  @else if $dir == 'down left' or $dir == 'left down' {
    border-width: $height 0 0 $width;
    border-color: transparent transparent transparent $color;

    @if $ie6 {
      _border-color: #000000 #000000 #000000 $color;
    }
  }

  //  Triangle is looking down-right
  @else if $dir == 'down right' or $dir == 'right down' {
    border-width: 0 0 $height $width;
    border-color: transparent transparent $color transparent;

    @if $ie6 {
      _border-color: #000000 #000000 $color #000000;
    }
  }

  //  Custom triangle. Direction is up
  @else if $dir == 'custom up' {
    border-width: 0 $right $height $left;
    border-color: transparent transparent $color transparent;

    @if $ie6 {
      _border-color: #000000 #000000 $color #000000;
    }
  }

  //  Custom triangle. Direction is down
  @else if $dir == 'custom down' {
    border-width: $height $right 0 $left;
    border-color: $color transparent transparent transparent;

    @if $ie6 {
      _border-color: $color #000000 #000000 #000000;
    }
  }

  //  Custom triangle. Direction is left
  @else if $dir == 'custom left' {
    border-width: $up $width $down 0;
    border-color: transparent $color transparent transparent;

    @if $ie6 {
      _border-color: #000000 $color #000000 #000000;
    }
  }

  //  Custom triangle. Direction is right
  @else if $dir == 'custom right' {
    border-width: $up 0 $down $width;
    border-color: transparent transparent transparent $color;

    @if $ie6 {
      _border-color: #000000 #000000 #000000 $color;
    }
  }

  //  Polyfill for Internet Explorer 6 (optional)
  @if $ie6 {
    line-height: 0;
    _filter: progid:DXImageTransform.Microsoft.Chroma(color='#000000');
  }
}

._webkit-better-antialiasing {
  -webkit-transform: rotate(360deg);
}

._firefox-gray-border-problem {
  border-style: inset;
}
