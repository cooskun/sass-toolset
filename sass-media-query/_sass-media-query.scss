// Dependencies
@import '_config.scss';
@import '_functions.scss';

// **************************************
// Query
// **************************************
@mixin media($args...) {
  $query: $default-device;

  @each $item in $args {
    @if type_of($item) == 'string' {
      @if map_has_key($Queries, $item) {
        $query: $query + ' and ' + map_get($Queries, $item);
      }
    }

    @if type_of($item) == 'map' {
      $feature: map_keys($item);
      $value: map_values($item);

      $query: $query + ' and ' + '(#{$feature} : #{$value})';
    }

    @if type-of($item) == 'number' {
      $item: fix-unitless($item);

      @if str_index($query, min-width) and str_index($query, max-width) {
        @warn "You can add maximum two number value";
      } @else {
        @if str_index($query, min-width) {
          $query: $query + ' and ' + '(max-width : #{$item})';
        } @else {
          $query: $query + ' and ' + '(min-width : #{$item})';
        }
      }
    }
  }

  @media #{$query} {
    @content;
  }
}

// Size Queries
// **************************************
@mixin min($value) {
  @if type_of($value) == 'number' {
    @include media($value) {
      @content;
    }
  }
}

@mixin max($value) {
  @if type_of($value) == 'number' {
    $value: fix-unitless($value);

    @include media(
      (
        max-width: $value
      )
    ) {
      @content;
    }
  }
}

@mixin minMax($min, $max) {
  @if type_of($min) == 'number' and type_of($max) == 'number' and $max > $min {
    $min: fix-unitless($min);
    $max: fix-unitless($max);

    @include media($min, $max) {
      @content;
    }
  }
}

@mixin width($value) {
  @if type_of($value) == 'number' {
    $value: fix-unitless($value);

    @include media(
      (
        width: $value
      )
    ) {
      @content;
    }
  }
}

@mixin height($value) {
  @if type_of($value) == 'number' {
    $value: fix-unitless($value);

    @include media(
      (
        height: $value
      )
    ) {
      @content;
    }
  }
}

// Breakpoint Mixins
// **************************************

// Min-Width
@mixin xs() {
  @include min($xs-min) {
    @content;
  }
}

@mixin sm() {
  @include min($sm-min) {
    @content;
  }
}

@mixin md() {
  @include min($md-min) {
    @content;
  }
}

@mixin lg() {
  @include min($lg-min) {
    @content;
  }
}

@mixin xl() {
  @include min($xl-min) {
    @content;
  }
}

// Max-width
@mixin xs-max() {
  @include max($xs-max) {
    @content;
  }
}

@mixin sm-max() {
  @include max($sm-max) {
    @content;
  }
}

@mixin md-max() {
  @include max($md-max) {
    @content;
  }
}

@mixin lg-max() {
  @include max($lg-max) {
    @content;
  }
}

// Min-Width and Max-Width
@mixin xs-only() {
  @include minMax($xs-min, $xs-max) {
    @content;
  }
}

@mixin sm-only() {
  @include minMax($sm-min, $sm-max) {
    @content;
  }
}

@mixin md-only() {
  @include minMax($md-min, $md-max) {
    @content;
  }
}

@mixin lg-only() {
  @include minMax($lg-min, $lg-max) {
    @content;
  }
}

// Orientations
// **************************************
@mixin orientation($value) {
  @if isExists($orientations, $value) {
    @include media((orientation: $value)) {
      @content;
    }
  }
}

@mixin portrait() {
  @include orientation(portrait) {
    @content;
  }
}

@mixin landscape() {
  @include orientation(landscape) {
    @content;
  }
}

// Retina
// **************************************
@mixin retina() {
  @include media(retina) {
    @content;
  }
}
